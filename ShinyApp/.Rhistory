newmatrix <- data.frame()
#looping each line
for(n in aslines){
sizing <- data.frame()
#looping each dot separated vector
for(i in n){
#code for selecting and counting the number of words in the phrase to be bigger than 2
if(length(strsplit(as.matrix(i),'\\s+')[[1]]) >=3){
sizing<- rbind(sizing, data.frame(i))
}
}
newmatrix<- rbind(newmatrix, sizing)
rm(sizing)
}
assign(paste("newmatrix",num_files,sep=""),newmatrix)
rm(newmatrix)
rm(num_files)
rm(n)
rm(i)
}
View(newmatrix)
?memory.size()
memory.limit()
memory.size
rm(newmatrix)
rm(sizing)
rm(i)
rm(n)
rm(num_files)
rm(aslines)
for(num_files in 1:length(us_files)){
#converting Corpus file to a list object
aslines <- as.list(us_files[[num_files]])
#creating an empty data frame
newmatrix <- data.frame()
#looping each line
for(n in aslines){
sizing <- data.frame()
#looping each dot separated vector
newmatrix<- rbind(newmatrix, data.frame(n))
}
assign(paste("newmatrix",num_files,sep=""),newmatrix)
rm(newmatrix)
rm(num_files)
rm(n)
}
rm(newmatrix)
rm(num_files)
rm(n)
rm(sizing)
rm(aslines)
#Loop for converting to multiple matrixes
for(num_files in 1:length(us_files)){
#converting Corpus file to a list object
aslines <- as.list(us_files[[num_files]])
#creating an empty data frame
newmatrix <- data.frame()
#looping each line
for(n in aslines){
#looping each dot separated vector
newmatrix<- rbind(newmatrix, data.frame(n))
}
assign(paste("newmatrix",num_files,sep=""),newmatrix)
rm(newmatrix)
rm(num_files)
rm(n)
rm(aslines)
}
install.packages(c("KernSmooth", "Lahman", "rmarkdown"))
library("tm")
d <- Come by the check out a movie, eat a great dinner and top it off with great times at the ice rink.
d <- "Come by the check out a movie, eat a great dinner and top it off with great times at the ice rink."
d <- tm_map(d, removeWords, stopwords('english'))
removeWords
removeWords(d, stopwords('english'))
d <- "you could just shut the fuck up"
removeWords(d, stopwords('english'))
d <- "I curse like a fucking sailor"
removeWords(d, stopwords('english'))
x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
Try the code x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
round(1 -pnorm(6.7, mean=4.6, sd=1.1),2)
#Create a sequence of numbers for your x axis
x<-seq(-4, 4, 0.01)
#plot for each x the probability to draw x at random from the distribution
plot(x, dnorm(x), type="l")
plot(x, pnorm(x))
qnorm(c(0.025, 0.975))
qnorm(c(0.025, 0.975))
#Create a sequence of numbers for your x axis
x<-seq(-4, 4, 0.01)
#plot for each x the probability to draw x at random from the distribution
plot(x, dnorm(x), type="l")
qnorm(c(0.025, 0.975), x)
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="blood pressure")
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="blood pressure")
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="one tailed test")
pnorm(72, 90, 10) # probability of randomly selecting a subject bt 72 or lower
abline(v=72) # Draw a line for 72 . v is the x-value for a vertical line
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),1)
polygon(cord.x,cord.y,col='skyblue')
cord.y <- c(1,dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
cord.y <- c(0,1-dnorm(seq(60, 72, 1), 90, 10),1)
polygon(cord.x,cord.y,col='skyblue')
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="one tailed test")
polygon(cord.x,cord.y,col='skyblue')
cord.y <- c(0,1-dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="one tailed test")
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
cord.x <- c(72,seq(60,72,1),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,72,5),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,72,2),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,120,1),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,72,1),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,82,1),120)
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(72,seq(60,65,1),120)
polygon(cord.x,cord.y,col='skyblue')
#two-tailed test
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
pnorm(72, 90, 10)
abline(v=72)
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
polygon(cord.x,cord.y,col='skyblue')
cord.x1 <- c(108,seq(108,120,1),120)
cord.y1 <- c(0,dnorm(seq(108, 120, 1), 90, 10),0)
polygon(cord.x1,cord.y1,col='skyblue')
text(65, 0.005, round(pnorm(72, 90, 10), 3))
text(115, 0.005, round(pnorm(72, 90, 10), 3))
text(75, 0.02,  " p = 0.072 "  )
x <- seq(-4,4,0.05); plot (dnorm(x))
curve(dnorm(x), from= -4, to=4)
x <- seq(-4,4,0.05); plot (dnorm(x), type="l")
??~
??"~"
x <- c("No","No","No","Yes","Yes","Yes","Yes")
y <- c(1,1,0,2,3,2,4)
z <- matryx(x,y)
z <- matry(x,y)
z <- matrix(x,y)
z
z <- matrix(c(x,y)
)
z
x <- c("No","No","No","Yes","Yes","Yes","Yes")
y <- c(1,1,0,2,3,2,4)
z <- matrix(c(7,2))
z
z <- matrix(c(7,2),7,2)
a
z
x <- c("No","No","No","Yes","Yes","Yes","Yes")
y <- c(1,1,0,2,3,2,4)
z <- matrix(c(x,y),7,2)
z
table(y~x)
table(y ~ x)
plot(y ~ x)
z <- data.frame(x,y)
z
attach(z)
plot(y ~ x)
t.test(y ~ x)
x <- c("No","No","No","Yes","Yes","Yes","Yes")
y <- c(1,1,0,2,3,2,4)
t.test(y ~ x)
x ~ mean
x mean
x ~ t,test
x ~ t.test
x ~ y
pnorm(100, 90, 10)
1-pnorm(100, 90, 10)
abline()
abline(1)
?abline()
abline(1,2)
z <- data.frame(x,y)
names(z)[1]
names(z)[2]
cat(names(z)[2],names(z)[2])
names(z) <- c(cat(names(z)[1],names(z)[2], sep"_"), cat(names(z)[2],names(z)[1], sep"_"))
names(z) <- c(cat(names(z)[1],names(z)[2], sep" "), cat(names(z)[2],names(z)[1], sep" "))
names(z) <- c(cat(names(z)[1],names(z)[2], sep = "_"), cat(names(z)[2],names(z)[1], sep = "_"))
names(z)
z
z <- data.frame(x,y)
names(z) <- c(cat(names(z)[1],names(z)[2], sep = "_"), cat(names(z)[2],names(z)[1], sep = "_"))
z
z <- data.frame(x,y)
z
names(z) <- c(1,2)
z
names(z) <- c(cat(names(z)[1],names(z)[2], sep = "_"), cat(names(z)[2],names(z)[1], sep = "_"))
z <- data.frame(x,y)
names(z) <- c(paste(names(z)[1],names(z)[2], sep = "_"), paste(names(z)[2],names(z)[1], sep = "_"))
z
round(50000 * ( 1 - pnorm(190, 182, 7))) - round(50000 * ( 1 - pnorm(180, 182, 7)))
round(50000 * ( 1 - pnorm(180, 182, 7))) - round(50000 * ( 1 - pnorm(190, 182, 7)))
round(50000 * ( 1 - pnorm(181, 182, 7))) - round(50000 * ( 1 - pnorm(189, 182, 7)))
round(50000 * ( 1 - pnorm(180.1, 182, 7))) - round(50000 * ( 1 - pnorm(190.1, 182, 7)))
seq(60,72,1)
#two-tailed test
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
pnorm(72, 90, 10)
abline(v=72)
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0)
#two-tailed test
bt <- seq(60, 120, 1)
plot(bt, dnorm(bt, 90, 10), type="l", xlim=c(60, 120), main="two-tailed test")
pnorm(72, 90, 10)
abline(v=72)
cord.x <- c(60,seq(60,72,1),72)
cord.y <- c(0,dnorm(seq(60, 72, 1), 90, 10),0.01)
polygon(cord.x,cord.y,col='skyblue')
cord.y <- c(0.01,dnorm(seq(60, 72, 1), 90, 10),0.01)
polygon(cord.x,cord.y,col='skyblue')
curve(dnorm(x), from= -4, to=4)
curve(dnorm(x), from= -4, to=4)
x
curve(dnorm(x), from= -4, to=4)
x
curve(dnorm(x), from= -4, to=4)
curve(dnorm(x), from= -4, to=4)
x
x = 2
curve(dnorm(x), from= -4, to=4)
curve(dnorm(x), from= -4, to=4)
curve(dnorm(x, 90, 10), from= 60, to=120)
segments(qnorm(c(0.05, 0.95), 90, 10), 0, qnorm(c(0.05, 0.95), 90, 10)
, dnorm(qnorm(c(0.05, 0.95), 90, 10), 90, 10))
x <-seq(-4,4,0.1); y <-dnorm(x); plot(x,y,type="l");
x.points <-seq(-4,1,0.1); y.points <-dnorm(x.points)
polygon(c(x.points,1),c(y.points,0),col="blue")
polygon(c(x.points,1),c(y.points,0),col=blue)
polygon(x.points,y.points,col="blue")
polygon(x,y,col="blue")
round(179.6)
round(179.501)
round(179.5)
round(50000 * ( 1 - pnorm(179.5, 182, 7))) - round(50000 * ( 1 - pnorm(190.49, 182, 7)))
round(50000 * ( 1 - pnorm(180.5, 182, 7))) - round(50000 * ( 1 - pnorm(189.49, 182, 7)))
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
x=seq(50,140,length=200)
y1=dnorm(x,80, 10)
plot(x,y1,type='l',lwd=2,col='red')
y2=dnorm(x,110, 10)
lines(x,y2,type='l',lwd=2,col='blue')
body <-
read.table("http://www.amstat.org/publications/jse/datasets/body.dat.txt")
dim(body)  #Check that dimensions are 507  25
BodyMeasurements <- c("Biacromial_diameter","Biiliac_diameter",
"Bitrochanteric_diameter", "Chest_depth","Chest_diameter",
"Elbow_diameter","Wrist_diameter", "Knee_diameter","Ankle_diameter",
"Shoulder_girth","Chest_girth", "Waist_girth","Navel_girth",
"Hip_girth","Thigh_girth", "Bicep_girth","Forearm_girth",
"Knee_girth","Calf_max_girth", "Ankle_min_girth","Wrist_min_girth",
"Age","Weight","Height","Gender")
names(body) <- BodyMeasurements
#The appropriate variable type of gender is factor
body$Gender <- as.factor(body$Gender)
View(body)
summary(body$Gender)
boxplot(body)
boxplot(body[10:15,])
boxplot(body)
boxplot(body[,10:15])
hist(body[,10])
hist(body$Shoulder_girth)
hist(body$Shoulder_girth[body$Gender == 1])
qqnorm(y=body$Shoulder_girth); qqline(y=body$Shoulder_girth)
qqnorm(y=body$Shoulder_girth[body$Gender == 1])
qqline(y=body$Shoulder_girth[body$Gender == 1])
t.test(body$Shoulder_girth ~ body$Gender)
t.test(body$Shoulder_girth ~ body$Gender, var.equal=T)
set.seed(200)
instrument1 <- round(rnorm(20,6,0.5),3)
instrument2 <- round(rnorm(20,6,2),3)
comparemethods <- cbind(instrument1, instrument2); boxplot(comparemethods)
mean(instrument1)/var(instrument1)*100
var(instrument1)/mean(instrument1)*100
sd(instrument1)/mean(instrument1)*100
x <- 0:2
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:2
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:2
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
dnorm(x, 1, 0.8)
round(dnorm(x, 1, 0.8),2)
round(dbinom(x, 2, 0.5),2)
round(dbinom(2, 4, 1.5),2)
round(pbinom(2, 4, 1.5),2)
pbinom(2, 4, 1.5)
dnorm(2, 4, 1.5)
dnorm(2, 15, 5.6)
sqrt(8*0.5*(1-0.5))
sqrt(30*0.5*(1-0.5))
30*0.5*(1-0.5))
30*0.5*(1-0.5)
set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(opar) #Reset the graph parameters
#Reset can also be achieved by closing the Graphics window
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=F)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=F)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=F)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
sd(sampl)/sqrt(300)
sd(sampl)^2
sd(sampl)*sqrt(300)
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
View(ME)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
View(ME)
head(me)
head(ME)
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep)
head(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
head(trimmed)
test <- apply(ME,1,function(ME){mean(ME[,1:12])})
keep1 <- apply(ME[,1:12],1,mean)
keep2 <- apply(ME[,13:24],1,mean)
keep1
keep2
?t.test
P <- t.test(keep1, keep2, var.equal=T)
P$p.value
t.test(keep1, keep2, var.equal=T)
trimmed2 <- apply(ME,1,function(ME){t.test(ME[,1:12], ME[,13:24])})
:apply
?apply
t.test(ME[1,1:12], ME[1,13:24])
t.test(ME[1,1:12], ME[1,13:24], var.equal= T)
P <- apply(ME,1, function(x)) t.test(x[1,1:12], x[1,13:24], var.equal= T)
P <- apply(ME,1, function(x) t.test(x[1,1:12], x[1,13:24], var.equal= T))
P <- apply(ME,1, function(x) t.test(x[,1:12], x[,13:24], var.equal= T))
head(ME)
t.test$p.value(ME[1,1:12], ME[1,13:24], var.equal= T)
t.test(ME[1,1:12], ME[1,13:24], var.equal= T)$p.valye
t.test(ME[1,1:12], ME[1,13:24], var.equal= T)$p.value
P <- apply(ME,1, function(x) t.test(x[,1:12], x[,13:24], var.equal= T)$p.value)
P <- apply(ME,1, function(x) t.test(x[,:12], x[,13:], var.equal= T)$p.value)
P <- apply(ME,1, function(x) t.test(x[1:12], x[13:24], var.equal= T)$p.value)
head(P)
keep1 <- P >= 0.05
keep1
keep1 <- P <= 0.05
length(keep1)
sum(keep1)
apply(ME[,13:24],1,mean)
apply(ME[1:1000],2,mean)
apply(ME[1:1000,],2,mean)
runApp()
library("shiny")
runApp()
Capstone
setwd("D:/Dropbox/Courses/Coursera Courses/Data Science Capstone on Coursera/Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(print("Sorry no prediction for your word"))
cat("Sorry no prediction for your word")
word <- "name pink"
if(word =="--- Wait, loading data ---"){
return(cat("!!!TRY ME!!!"))
}
word <- gsub("^[[:punct:][:space:][:cntrl:][:digit:]]+", "", word)
word <- gsub("[[:space:]]+", " ", word)
word <- tolower(word)
word <- gsub("^i ", "I ", word)
word <- gsub("^i'", "I'", word)
word <- gsub(" i ", " I ", word)
word <- gsub(" i'", " I'", word)
first_letter <- substring(word, 1, 1)
first_letter <- tolower(first_letter)
n_words <- length(strsplit(as.matrix(word),'\\s+')[[1]])
ngram = n_words + 1
test <- get(paste(ngram,"-gram_",first_letter, sep=""))
prediction <- test[grepl(test[,1], pattern=paste("^",word, " ", sep="")),1:2]
if(length(prediction[,1])==0){
wbw <- NULL
}
result_1 <- as.vector(wbw[1:length(wbw[,1]),ngram])
word2 <- strsplit(word, split="\\s+")
word <- paste(word2[[1]][1], substring(word2[[1]][2], 1, nchar(word2[[1]][2])/2))
prediction <- test[grepl(test[,1], pattern=paste("^",word, sep="")),1:2]
wbw <- strsplit(as.matrix(prediction[,1]), split="\\s+")
wbw <- matrix(unlist(wbw), ncol = ngram, byrow = TRUE)
wbw <- data.frame(cbind(wbw, prediction[,2]))
wbw <- matrix(unlist(wbw), ncol = ngram+1, byrow = F)
wbw <- wbw[!grepl(wbw[,ngram], pattern = paste("^",result_1,"$", collapse="|", sep="")),]
wbw <- matrix(unlist(wbw), ncol = ngram+1, byrow = F)
wbw <- wbw[!grepl(wbw[,ngram], pattern = paste("^",badwords[,1],"$", collapse="|", sep="")),]
wbw <- wbw[order(as.numeric(wbw[,ngram+1]), decreasing = TRUE),]
wbw <- matrix(unlist(wbw), ncol = ngram+1, byrow = F)
wbw <- strsplit(as.matrix(prediction[,1]), split="\\s+")
wbw <- matrix(unlist(wbw), ncol = ngram, byrow = TRUE)
wbw <- data.frame(cbind(wbw, prediction[,2]))
wbw <- matrix(unlist(wbw), ncol = ngram+1, byrow = F)
wbw <- wbw[!grepl(wbw[,ngram], pattern = paste("^",result_1,"$", collapse="|", sep="")),]
wbw <- matrix(unlist(wbw), ncol = ngram+1, byrow = F)
wbw
wbw <- wbw[!grepl(wbw[,ngram], pattern = paste("^",badwords[,1],"$", collapse="|", sep="")),]
wbw
runApp()
